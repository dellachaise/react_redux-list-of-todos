{"version":3,"sources":["store/actions.ts","api/api.ts","components/TodoList/TodoList.tsx","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionType","API_URL","getTodos","a","fetch","response","json","getUserById","userId","FilterOptions","getUserSelector","state","user","TodoList","dispatch","useDispatch","useState","query","setQuery","all","filter","setFilter","useSelector","filteredTodos","todos","todo","title","includes","getFilteredTodosSelector","useEffect","loadTodosFromServer","todosFromServer","payload","type","SET_TODOS","getUser","id","userFromServer","SET_USER","console","log","visibleTodos","complited","completed","active","options","method","headers","Accept","className","value","placeholder","onChange","event","target","toLowerCase","map","classNames","readOnly","onClick","todoId","error","deleteHandler","window","location","reload","CurrentUser","name","email","phone","CLEAR_USER","App","initialState","store","createStore","action","ADD_TODO","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0379bb6b.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n  CLEAR_USER = 'CLEAR_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface AddTodoAction {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User,\n}\n\nexport interface SetUserCleaner {\n  type: ActionType.CLEAR_USER,\n  payload: null,\n}\n\nexport interface DeleteUser {\n  type: ActionType.CLEAR_USER,\n  payload: null,\n}\n\nexport type Action = SetTodosAction\n| AddTodoAction\n| SetUserAction\n| SetUserCleaner;\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const cleanUserAction = (payload: null): Action => ({\n  type: ActionType.CLEAR_USER,\n  payload,\n});\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport {\n  getFilteredTodosSelector,\n  getUserSelector,\n} from '../../store/selectors';\n\nenum FilterOptions {\n  all,\n  complited,\n  active,\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState<FilterOptions>(FilterOptions.all);\n  const user = useSelector(getUserSelector);\n  const filteredTodos = useSelector(getFilteredTodosSelector(query));\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUserAction(userFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const visibleTodos = filteredTodos.filter((todo) => {\n    switch (filter) {\n      case FilterOptions.complited: {\n        return todo.completed === true;\n      }\n\n      case FilterOptions.active: {\n        return todo.completed === false;\n      }\n\n      default:\n        return todo;\n    }\n  });\n\n  const url = 'https://mate.academy/students-api/todos';\n  const options = {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const deleteHandler = (todoId: number) => {\n    try {\n      fetch(`${url}/${todoId}`, options);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"TodoList__search\"\n          value={query}\n          placeholder=\"Type search word\"\n          onChange={event => setQuery(event.target.value.toLowerCase())}\n        />\n        <select\n          className=\"TodoList__select\"\n          onChange={((event) => setFilter(+event.target.value))}\n        >\n          <option\n            value={FilterOptions.all}\n          >\n            Show all\n          </option>\n          <option\n            value={FilterOptions.complited}\n          >\n            Show complited\n          </option>\n          <option\n            value={FilterOptions.active}\n          >\n            Show uncomplited\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p className=\"TodoList__list-paragraph\">{todo.title}</p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  },\n                )}\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  },\n                )}\n                onClick={() => {\n                  deleteHandler(todo.id);\n                  window.location.reload();\n                }}\n              >\n                Remove\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n\nexport const getFilteredTodosSelector = (query: string) => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.title.includes(query)\n    ));\n  };\n};\n\nexport const getComplitedTodosSelector = () => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.completed\n    ));\n  };\n};\n\nexport const getActiveTodosSelector = () => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.completed === false\n    ));\n  };\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { cleanUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"submit\"\n        className=\"button CurrentUser__clear\"\n        onClick={() => dispatch(cleanUserAction(null))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <div className=\"App__sidebar\">\n      <TodoList />\n    </div>\n\n    <div className=\"App__content\">\n      <div className=\"App__content-container\">\n        <CurrentUser />\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { ActionType, Action } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.CLEAR_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}