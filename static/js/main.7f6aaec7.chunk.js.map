{"version":3,"sources":["store/actions.ts","api/api.ts","components/TodoList/TodoList.tsx","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionType","API_URL","getTodos","a","fetch","response","json","getUserById","userId","deleteTodo","todoId","method","FilterOptions","setTodosAction","payload","type","SET_TODOS","getUserSelector","state","user","TodoList","dispatch","useDispatch","useState","query","setQuery","all","filter","setFilter","useSelector","filteredTodos","todos","todo","title","includes","getFilteredTodosSelector","useEffect","loadTodosFromServer","todosFromServer","getUser","id","userFromServer","SET_USER","console","log","visibleTodos","complited","completed","active","deleteHandler","className","value","placeholder","onChange","event","target","toLowerCase","map","classNames","readOnly","onClick","CurrentUser","name","email","phone","CLEAR_USER","App","initialState","store","createStore","action","ADD_TODO","ReactDOM","render","document","getElementById"],"mappings":"4OAEYA,E,mGCANC,EAAU,oCAEHC,EAAQ,uCAAG,4BAAAC,EAAA,sEACCC,MAAM,GAAD,OAAIH,EAAJ,WADN,cAChBI,EADgB,yBAGfA,EAASC,QAHM,2CAAH,qDAMRC,EAAW,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACFC,MAAM,GAAD,OAAIH,EAAJ,kBAAqBO,IADxB,cACnBH,EADmB,yBAGlBA,EAASC,QAHS,2CAAH,sDAMXG,EAAU,uCAAG,WAAOC,GAAP,SAAAP,EAAA,+EACjBC,MAAM,GAAD,OAAIH,EAAJ,kBAAqBS,GAAU,CAAEC,OAAQ,YAD7B,2CAAH,uD,SDdXX,K,sBAAAA,E,oBAAAA,E,oBAAAA,E,yBAAAA,M,KAqCL,IE5BFY,EF4BQC,EAAiB,SAACC,GAAD,MAA8B,CAC1DC,KAAMf,EAAWgB,UACjBF,YGrCWG,EAAkB,SAACC,GAAD,OAAkBA,EAAMC,M,iBDOlDP,O,aAAAA,I,yBAAAA,I,oBAAAA,M,KAME,IAAMQ,EAAqB,WAChC,IAAMC,EAAWC,cACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAwBX,EAAcc,KAAlE,mBAAOC,EAAP,KAAeC,EAAf,KACMT,EAAOU,YAAYZ,GACnBa,EAAgBD,YChBgB,SAACL,GACvC,OAAO,SAACN,GACN,OAAOA,EAAMa,MAAMJ,QAAO,SAAAK,GAAI,OAC5BA,EAAKC,MAAMC,SAASV,ODaUW,CAAyBX,IAE3DY,qBAAU,WACR,IAAMC,EAAmB,uCAAG,4BAAAlC,EAAA,sEACID,IADJ,OACpBoC,EADoB,OAG1BjB,EAASR,EAAeyB,IAHE,2CAAH,qDAMzBD,MACC,IAEH,IAAME,EAAO,uCAAG,WAAOC,GAAP,eAAArC,EAAA,+EAEiBI,EAAYiC,GAF7B,OAENC,EAFM,OAIZpB,GFWwBP,EEXD2B,EFW4B,CACvD1B,KAAMf,EAAW0C,SACjB5B,aEjBgB,gDAOZ6B,QAAQC,IAAR,MAPY,kCFeW,IAAC9B,IEfZ,oBAAH,sDAWP+B,EAAef,EAAcH,QAAO,SAACK,GACzC,OAAQL,GACN,KAAKf,EAAckC,UACjB,OAA0B,IAAnBd,EAAKe,UAGd,KAAKnC,EAAcoC,OACjB,OAA0B,IAAnBhB,EAAKe,UAGd,QACE,OAAOf,MAIPiB,EAAa,uCAAG,WAAOvC,GAAP,eAAAP,EAAA,+EAEZM,EAAWC,GAFC,sDAKlBiC,QAAQC,IAAR,MALkB,wBAQU1C,IARV,QAQdoC,EARc,OAUpBjB,EAASR,EAAeyB,IAVJ,yDAAH,sDAanB,OACE,sBAAKY,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UACE,uBACEnC,KAAK,OACLyB,GAAG,eACHU,UAAU,mBACVC,MAAO3B,EACP4B,YAAY,mBACZC,SAAU,SAAAC,GAAK,OAAI7B,EAAS6B,EAAMC,OAAOJ,MAAMK,kBAEjD,yBACEN,UAAU,mBACVG,SAAW,SAACC,GAAD,OAAW1B,GAAW0B,EAAMC,OAAOJ,QAFhD,UAIE,wBACEA,MAAOvC,EAAcc,IADvB,sBAKA,wBACEyB,MAAOvC,EAAckC,UADvB,4BAKA,wBACEK,MAAOvC,EAAcoC,OADvB,iCAMF,oBAAIE,UAAU,iBAAd,SACGL,EAAaY,KAAI,SAACzB,GAAD,OAChB,qBAEEkB,UAAWQ,IACT,iBACA,CACE,6BAA8B1B,EAAKe,UACnC,0BAA2Bf,EAAKe,YANtC,UAUE,kCACE,uBAAOhC,KAAK,WAAW4C,UAAQ,IAC/B,mBAAGT,UAAU,2BAAb,SAAyClB,EAAKC,WAGhD,wBACElB,KAAK,SACLmC,UAAWQ,IACT,+BACA,CACE,kCAAmC1B,EAAKxB,UAAL,OAAgBW,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMqB,MAG7DoB,QAAS,WACPrB,EAAQP,EAAKxB,SATjB,yBAYYwB,EAAKxB,UAEjB,wBACEO,KAAK,SACLmC,UAAWQ,IACT,+BACA,CACE,kCAAmC1B,EAAKxB,UAAL,OAAgBW,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAMqB,MAG7DoB,QAAS,kBAAMX,EAAcjB,EAAKQ,KARpC,sBA5BKR,EAAKQ,gBEvGXqB,G,MAAwB,WACnC,IAAM1C,EAAOU,YAAYZ,GAEnBI,EAAWC,cAEjB,OAAKH,EAKH,sBAAK+B,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyB/B,EAAKqB,QAGhC,oBAAIU,UAAU,oBAAd,SAAmC/B,EAAK2C,OACxC,mBAAGZ,UAAU,qBAAb,SAAmC/B,EAAK4C,QACxC,mBAAGb,UAAU,qBAAb,SAAmC/B,EAAK6C,QAExC,wBACEjD,KAAK,SACLmC,UAAU,4BACVU,QAAS,kBAAMvC,GJ0BSP,EI1BgB,KJ0BW,CACzDC,KAAMf,EAAWiE,WACjBnD,aAF6B,IAACA,GI7B1B,sBAbK,mDCQIoD,EAdO,kBACpB,sBAAKhB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,cAAC,EAAD,Y,uBCVFiB,EAAsB,CAC1BpC,MAAO,GACPZ,KAAM,MAkCKiD,EAAQC,aA/BL,WAA2C,IAA1CnD,EAAyC,uDAAjCiD,EAAcG,EAAmB,uCACxD,OAAQA,EAAOvD,MACb,KAAKf,EAAWgB,UACd,OAAO,2BACFE,GADL,IAEEa,MAAM,YAAKuC,EAAOxD,WAGtB,KAAKd,EAAWuE,SACd,OAAO,2BACFrD,GADL,IAEEa,MAAM,GAAD,mBAAMb,EAAMa,OAAZ,CAAmBuC,EAAOxD,YAGnC,KAAKd,EAAW0C,SACd,OAAO,2BACFxB,GADL,IAEEC,KAAMmD,EAAOxD,UAGjB,KAAKd,EAAWiE,WACd,OAAO,2BACF/C,GADL,IAEEC,KAAM,OAGV,QACE,OAAOD,MC/BbsD,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.7f6aaec7.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n  CLEAR_USER = 'CLEAR_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface AddTodoAction {\n  type: ActionType.ADD_TODO,\n  payload: Todo,\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User,\n}\n\nexport interface SetUserCleaner {\n  type: ActionType.CLEAR_USER,\n  payload: null,\n}\n\nexport interface DeleteUser {\n  type: ActionType.CLEAR_USER,\n  payload: null,\n}\n\nexport type Action = SetTodosAction\n| AddTodoAction\n| SetUserAction\n| SetUserCleaner;\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ActionType.ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User): Action => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const cleanUserAction = (payload: null): Action => ({\n  type: ActionType.CLEAR_USER,\n  payload,\n});\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  return fetch(`${API_URL}/todos/${todoId}`, { method: 'DELETE' });\n};\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUserById, deleteTodo } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport {\n  getFilteredTodosSelector,\n  getUserSelector,\n} from '../../store/selectors';\n\nenum FilterOptions {\n  all,\n  complited,\n  active,\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState<FilterOptions>(FilterOptions.all);\n  const user = useSelector(getUserSelector);\n  const filteredTodos = useSelector(getFilteredTodosSelector(query));\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUserAction(userFromServer));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const visibleTodos = filteredTodos.filter((todo) => {\n    switch (filter) {\n      case FilterOptions.complited: {\n        return todo.completed === true;\n      }\n\n      case FilterOptions.active: {\n        return todo.completed === false;\n      }\n\n      default:\n        return todo;\n    }\n  });\n\n  const deleteHandler = async (todoId: number) => {\n    try {\n      await deleteTodo(todoId);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"TodoList__search\"\n          value={query}\n          placeholder=\"Type search word\"\n          onChange={event => setQuery(event.target.value.toLowerCase())}\n        />\n        <select\n          className=\"TodoList__select\"\n          onChange={((event) => setFilter(+event.target.value))}\n        >\n          <option\n            value={FilterOptions.all}\n          >\n            Show all\n          </option>\n          <option\n            value={FilterOptions.complited}\n          >\n            Show complited\n          </option>\n          <option\n            value={FilterOptions.active}\n          >\n            Show uncomplited\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p className=\"TodoList__list-paragraph\">{todo.title}</p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  },\n                )}\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  },\n                )}\n                onClick={() => deleteHandler(todo.id)}\n              >\n                Remove\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n\nexport const getFilteredTodosSelector = (query: string) => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.title.includes(query)\n    ));\n  };\n};\n\nexport const getComplitedTodosSelector = () => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.completed\n    ));\n  };\n};\n\nexport const getActiveTodosSelector = () => {\n  return (state: State) => {\n    return state.todos.filter(todo => (\n      todo.completed === false\n    ));\n  };\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { cleanUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"submit\"\n        className=\"button CurrentUser__clear\"\n        onClick={() => dispatch(cleanUserAction(null))}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <div className=\"App__sidebar\">\n      <TodoList />\n    </div>\n\n    <div className=\"App__content\">\n      <div className=\"App__content-container\">\n        <CurrentUser />\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport { ActionType, Action } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.CLEAR_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}